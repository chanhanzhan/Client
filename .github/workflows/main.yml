name: Go Build and Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        goos: [linux, darwin]  # 支持不同操作系统
        goarch: [amd64, arm64]  # 支持不同架构

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3  # Updated to v3

      - name: Set up Go
        uses: actions/setup-go@v3  # Updated to v3
        with:
          go-version: '1.20'  # 设置Go版本，根据需要修改

      - name: Cache Go modules
        uses: actions/cache@v3  # Updated to v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build with Go
        run: |
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -ldflags="-s -w" -trimpath -buildmode=pie -o dist/myapp-${{ matrix.goos }}-${{ matrix.goarch }}

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3  # Updated to v3
        with:
          name: myapp-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/myapp-${{ matrix.goos }}-${{ matrix.goarch }}

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3  # Updated to v3

      - name: Set up GitHub CLI
        uses: cli/cli@v2.7.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create a new Git tag
        run: |
          VERSION=$(git describe --tags --abbrev=0)  # 获取最新的标签版本
          if [ -z "$VERSION" ]; then
            VERSION="v1.0.0"  # 默认标签版本
          fi
          git tag -a v${VERSION} -m "Release v${VERSION}"  # 创建标签
          git push origin v${VERSION}  # 推送标签

      - name: Create a Release
        run: |
          VERSION=$(git describe --tags --abbrev=0)
          gh release create v${VERSION} dist/* --title "Release v${VERSION}" --notes "Release v${VERSION}"